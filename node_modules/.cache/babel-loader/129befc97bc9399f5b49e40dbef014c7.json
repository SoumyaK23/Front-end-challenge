{"ast":null,"code":"var _jsxFileName = \"/Users/soumyakrishnamurthy/Documents/Cord/FE Challenge/front-end-test-cord/src/pages/discover/index.js\";\n\n/* This file contains functions that preload the page with movies list and genres.\r\nWhen searched by name and year, results should be displayed */\nimport React from \"react\";\nimport styled from 'styled-components';\nimport * as colors from \"../../colors\";\nimport * as fetcher from \"../../fetcher\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Discover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      year: 0,\n      results: [],\n      totalCount: 0,\n      genreOptions: [],\n      ratingOptions: [{\n        id: 7.5,\n        name: 7.5\n      }, {\n        id: 8,\n        name: 8\n      }, {\n        id: 8.5,\n        name: 8.5\n      }, {\n        id: 9,\n        name: 9\n      }, {\n        id: 9.5,\n        name: 9.5\n      }, {\n        id: 10,\n        name: 10\n      }],\n      languageOptions: [{\n        id: 'GR',\n        name: 'Greek'\n      }, {\n        id: 'EN',\n        name: 'English'\n      }, {\n        id: 'RU',\n        name: 'Russian'\n      }, {\n        id: 'PO',\n        name: 'Polish'\n      }]\n    };\n  } // function to preload genre list and trending movies when page loads\n\n\n  async componentDidMount() {\n    // preload genre list\n    const genresList = await fetcher.getGenresList();\n    this.setState({\n      genreOptions: genresList\n    }); // prelaod trending movies\n\n    const data = await fetcher.getTrendingMovies();\n    this.setState({\n      results: data.results,\n      totalCount: data.total_results\n    }); //{ ...this.state.results, results }\n  } // function to trigger the API request and load the search results based on the name and year given as parameters\n\n\n  async searchMovies(keyword, year) {\n    const data = await fetcher.getMovies(keyword, year);\n\n    if (data != undefined) {\n      this.setState({\n        results: data.results,\n        totalCount: data.total_results\n      });\n    } else {\n      this.setState({\n        results: [],\n        totalCount: 0\n      });\n    }\n  }\n\n  render() {\n    const {\n      genreOptions,\n      languageOptions,\n      ratingOptions,\n      totalCount,\n      results\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(DiscoverWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MobilePageTitle, {\n        children: \"Discover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(MovieFilters, {\n        children: /*#__PURE__*/_jsxDEV(SearchFilters, {\n          genres: genreOptions,\n          ratings: ratingOptions,\n          languages: languageOptions,\n          searchMovies: (keyword, year) => this.searchMovies(keyword, year)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieResults, {\n        children: [totalCount > 0 && /*#__PURE__*/_jsxDEV(TotalCounter, {\n          children: [totalCount, \" results\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n          movies: results || [],\n          genres: genreOptions || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nconst DiscoverWrapper = styled.main`\n  padding: 60px 35px;\n`;\n_c = DiscoverWrapper;\nconst TotalCounter = styled.div`\n  font-weight: 900;\n`;\n_c2 = TotalCounter;\nconst MovieResults = styled.div`\n\n`;\n_c3 = MovieResults;\nconst MovieFilters = styled.div`\n\n`;\n_c4 = MovieFilters;\nconst MobilePageTitle = styled.header`\n\n`;\n_c5 = MobilePageTitle;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"DiscoverWrapper\");\n$RefreshReg$(_c2, \"TotalCounter\");\n$RefreshReg$(_c3, \"MovieResults\");\n$RefreshReg$(_c4, \"MovieFilters\");\n$RefreshReg$(_c5, \"MobilePageTitle\");","map":{"version":3,"sources":["/Users/soumyakrishnamurthy/Documents/Cord/FE Challenge/front-end-test-cord/src/pages/discover/index.js"],"names":["React","styled","colors","fetcher","SearchFilters","MovieList","Discover","Component","constructor","props","state","keyword","year","results","totalCount","genreOptions","ratingOptions","id","name","languageOptions","componentDidMount","genresList","getGenresList","setState","data","getTrendingMovies","total_results","searchMovies","getMovies","undefined","render","DiscoverWrapper","main","TotalCounter","div","MovieResults","MovieFilters","MobilePageTitle","header"],"mappings":"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","sourcesContent":["/* This file contains functions that preload the page with movies list and genres.\r\nWhen searched by name and year, results should be displayed */ \r\n\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nimport * as colors from \"../../colors\";\r\nimport * as fetcher from \"../../fetcher\";\r\n\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\n\r\nexport default class Discover extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      keyword: '',\r\n      year: 0,\r\n      results: [],\r\n      totalCount: 0,\r\n      genreOptions: [],\r\n      ratingOptions: [\r\n        { id: 7.5, name: 7.5 },\r\n        { id: 8, name: 8 },\r\n        { id: 8.5, name: 8.5 },\r\n        { id: 9, name: 9 },\r\n        { id: 9.5, name: 9.5 },\r\n        { id: 10, name: 10 }\r\n      ],\r\n      languageOptions: [\r\n        { id: 'GR', name: 'Greek' },\r\n        { id: 'EN', name: 'English' },\r\n        { id: 'RU', name: 'Russian' },\r\n        { id: 'PO', name: 'Polish' }\r\n      ]\r\n    };\r\n  }\r\n\r\n  // function to preload genre list and trending movies when page loads\r\n  async componentDidMount() {\r\n    // preload genre list\r\n    const genresList = await fetcher.getGenresList();\r\n    this.setState({ genreOptions: genresList });\r\n\r\n    // prelaod trending movies\r\n    const data = await fetcher.getTrendingMovies();\r\n    this.setState({ results: data.results, totalCount: data.total_results }); //{ ...this.state.results, results }\r\n  }\r\n\r\n  // function to trigger the API request and load the search results based on the name and year given as parameters\r\n  async searchMovies(keyword, year) {\r\n    const data = await fetcher.getMovies(keyword, year);\r\n    if (data != undefined) {\r\n      this.setState({\r\n        results: data.results,\r\n        totalCount: data.total_results\r\n      });\r\n    } else {\r\n      this.setState({\r\n        results: [],\r\n        totalCount: 0\r\n      });\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { genreOptions, languageOptions, ratingOptions, totalCount, results } = this.state;\r\n\r\n    return (\r\n      <DiscoverWrapper>\r\n        <MobilePageTitle>Discover</MobilePageTitle> {/* MobilePageTitle should become visible on small screens & mobile devices*/}\r\n        <MovieFilters>\r\n          <SearchFilters \r\n            genres={genreOptions} \r\n            ratings={ratingOptions}  \r\n            languages={languageOptions}\r\n            searchMovies={(keyword, year) => this.searchMovies(keyword, year)}\r\n          />\r\n        </MovieFilters>\r\n        <MovieResults>\r\n          { totalCount > 0 && <TotalCounter>{totalCount} results</TotalCounter>}\r\n          <MovieList \r\n            movies={results || []}\r\n            genres={genreOptions || []}\r\n          />\r\n        </MovieResults>\r\n      </DiscoverWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nconst DiscoverWrapper = styled.main`\r\n  padding: 60px 35px;\r\n`\r\n\r\nconst TotalCounter = styled.div`\r\n  font-weight: 900;\r\n`\r\n\r\nconst MovieResults = styled.div`\r\n\r\n`\r\n\r\nconst MovieFilters = styled.div`\r\n\r\n`\r\n\r\nconst MobilePageTitle = styled.header`\r\n\r\n`"]},"metadata":{},"sourceType":"module"}